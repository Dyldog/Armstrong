{% macro AutoCodable type %}
{% if type|!annotated:"skipCodable" %}
extension {{ type.name }} {
    enum CodingKeys: String, CodingKey {
    {% for var in type.storedVariables where not var.defaultValue %}
        case {{ var.name }}
    {% endfor %}
    }

    public convenience init(from decoder: Decoder) throws {
        let valueContainer = try decoder.container(keyedBy: CodingKeys.self)
        
        {% if type.implements.CompositeEditableVariableValue %}
        self.init(
        {% for var in type.storedVariables where not var.defaultValue %}
            {{ var.name }}: (try? valueContainer.decode({{ var.typeName }}.self, forKey: .{{ var.name }})) ?? Properties.{{ var.name }}.defaultValue as! {{ var.typeName }}{{ "," if not forloop.last }}
        {% endfor %}
        )
        {% else %}
        self.init(
        {% for var in type.storedVariables where not var.defaultValue %}
            {{ var.name }}: (try? valueContainer.decode({{ var.typeName }}.self, forKey: .{{ var.name }})) ?? Self.makeDefault().{{ var.name }}{{ "," if not forloop.last }}
        {% endfor %}
        )
        {% endif %}
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        
        {% for var in type.storedVariables where not var.defaultValue %}
        try container.encode({{ var.name }}, forKey: .{{ var.name }})
        {% endfor %}
    }
}
{% endif %}
{% endmacro %}
